1.创建索引
1）创建单个索引
db.collection.ensureIndex({a:1})
在a字段上创建一个升序的索引(对于单个字段的索引，升序或是降序都一样)。
2)创建复合索引
db.collection.ensureIndex({a:1,b:-1})
3）创建稀疏索引
db.collection.ensureIndex({a:1},{sparse:true})
索引中将不包含没有a字段的文档。
4)创建唯一索引
db.collection.ensureIndex({a:1},{unique:true})
为a字段建立唯一索引。
当mongo要索引一个字段时，如果一篇文档中没有这个字段，这篇文档就会被索引为null，
因为唯一索引不能有重复值，所以必须和稀疏索引配合使用，如：
db.collection.ensureIndex({a:1},{unique:true,sparse:true})
复合索引也可以加唯一限制，如：
db.collection.ensureIndex({a:1,b:1},{unique:true})
5)在后台创建索引
db.collection.ensureIndex({a:1},{background:true})
6)丢弃重复数据
要强制在一个有重复数据的字段上创建唯一索引，可以使用dropDups选项，这会强制mongo
在创建唯一索引时删除重复数据（危险操作），如：
db.collection.ensureIndex({a:1},{dropDups:true})
 
2.查看索引
1)查看某个库上的所有索引
db.system.index.find()
2)查看某个表上的所有索引
db.collection.getIndexes()
 
3.删除索引
1)删除表上的某个索引
db.collection.dropIndex({a:1})
2)删除表上的所有索引
db.collection.dropIndexes()
 
4.重建索引
db.collection.reIndex()
以上操作会删除表上的所有索引(包含_id)并重建所有索引。
 
5.在副本集上创建索引
后台创建索引操作在一个副本集的从节点(secondary)上会变成前台操作，这时创建索引的操作会
阻塞从节点上的所有的复制和读操作。
从节点会在主节点完成创建索引的操作后开始创建索引，在分片集群环境(sharded cluster)中，
mongos会向每个分片上的副本集环境的主节点发送ensureIndex()，然后在主节点完成创建索引后
复制到从节点上。
为了在副本集环境中将创建索引的影响降低到最小，使用以下方法在从节点上创建索引：
1)在一个从节点上停止mongod进程，使用另一个端口号不采用--replSet选项重启mongod进程，这
   个mongod实例现在已"独立"(standalone)模式运行;
2)在这个mongod实例上创建新索引或者重建索引;
3)采用--replSet选项重启mongod实例。允许复制操作catch up这个成员;
4)在其它的从节点上重复这个操作;
5)在这个集(set)上的主节点上运行rs.stepDown()，然后在之前的主节点上重复这个过程。
 
6.索引中的升序键和降序键
对于单个键的索引，键的顺序没有关系。但是对于符合索引，键的升、降顺序有很大影响。
比如说一个表包含用户名(username)和该用户发表文章的时间(time)，如果你需要经常查询某用户最
新发表的文章，你应该创建这样的索引：
db.collection.ensureIndex({"username":1,"time":-1})
 
 --指定索引名字：
 db.collection.ensureIndex({"username":1,"time":-1},{name:'index_name'})
7.索引的限制
1)一个表上的索引不能超过64个;
2)索引的键不能超过1024bytes（）;
3)索引的名字（包含命名空间）必须少于128个字符;
 
8.索引策略
MongoDB对于每个操作只能使用一个索引，$or的每一个子句可以使用自己的索引。
对于下边的索引：
db.collection.ensureIndex({"category":1,"item":1})
无论单独查询category、item，还是两者一起查询，该索引都有效。但是有个例外，使用$or操作符时，
一个查询不能使用复合索引，只能使用单个索引。
一个多字段的复合索引可以支持所有在这些字段上就前缀子集进行查询的需求，例如：
db.collection.ensureIndex({x:1,y:1,z:1})
以上索引可以支持如下查询需求：
db.collection.find({x:232})
db.collection.find({x:232,y:3})
db.collection.find({x:232,y:3,z:34})
 
索引{x:1,y:1,z:1}可以支持一些索引{x:1,z:1}支持的查询?
对于查询db.collection.find({x:5}).sort({z:1})，索引{x:1,z:1}既支持查询页支持排序，而索引
{x:1,y:1,z:1}只支持查询？
 
使用索引为查询的结果排序：
比如有这样一个索引
db.collection.ensureIndex({a:1,b:1,c:1,d:1})
以下的查询和排序操作可以使用索引：
db.collection.find().sort({a:1})
db.collection.find().sort({a:1,b:1})
db.collection.find({a:4}).sort({a:1,b:1})
db.collection.find({b:5}).sort({a:1,b:1})
db.collection.find({a:5}).sort({b:1,c:1})
db.collection.find({a:5,c:4,b:3}).sort({d:1})
db.collection.find({a:{$gt:4}}).sort({a:1,b:1})
db.collection.find({a:{$gt:5}}).sort({a:1,b:1})
db.collection.find({a:5, b:3,d:{$gt:4}}).sort({c:1})
db.collection.find({a:5, b:3,c:{$lt:2},d:{$gt:4}}).sort({c:1})
以下的查询和排序不能使用索引：
db.collection.find().sort( { b:1 } )
db.collection.find( { b:5 } ).sort( { b:1 } )
 
对于不使用索引的sort()操作，当使用超过32Mb内存时，sort()操作将退出。