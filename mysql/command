设置Root密码
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('^%$clwy2015!@#$1234');
SET PASSWORD FOR 'x_smart'@'%' = PASSWORD('xsmart1234509876');
FLUSH PRIVILEGES;

#设置
SET PASSWORD FOR 'root'@'host_name' = PASSWORD('newpwd');

使用mysqladmin命令修改Mysql密码

1.例如你的 root用户现在没有密码，你希望的密码修改为123456，那么命令是：
mysqladmin -u root password 123456
2.如果你的root现在有密码了（123456），那么修改密码为abcdef的命令是：
mysqladmin -u root -p password abcdef

创建用户：
CREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456'; 
CREATE USER 'pig'@'%' IDENTIFIED BY '123456'; 
CREATE USER 'pig'@'%' IDENTIFIED BY ''; 

CREATE USER 'x-smart'@'%' IDENTIFIED BY 'xsmart%^&$#12%^'; 
CREATE USER 'x_smart'@'%' IDENTIFIED BY 'xsmart%^&$#12%^'; 

授权:

CREATE USER 'prnp'@'%' IDENTIFIED BY 'prnp'; 

GRANT ALL ON *.* TO 'prnp'@'%';

GRANT ALL ON x_smart.* TO 'x_smart'@'%';
GRANT ALL ON test_x_smart.* TO 'test_x_smart'@'%'
GRANT EXECUTE ON PROCEDURE test_x_smart TO ‘test_x_smart’@‘%‘
GRANT EXECUTE ON FUNCTION getDistance TO 'test_x_smart'@'%';

授于部分权限：
grant select,update,delete,drop,create on testDB.* to test@localhost identified by '1234';
grant select on *.* to 'read_prnp'@'%'' identified by 'read_prnp';

grant ALL ON *.* TO 'prnp'@'%'' identified by 'prnp';

导出数据：
命令行下具体用法如下：  mysqldump -u用戶名 -p密码 -d 數據库名 表名 脚本名;

    1、导出數據库為dbname的表结构（其中用戶名為root,密码為dbpasswd,生成的脚本名為db.sql）
    mysqldump -uroot -pdbpasswd -d dbname >db.sql;

    2、导出數據库為dbname某张表(test)结构
    mysqldump -uroot -pdbpasswd -d dbname test>db.sql;

    3、导出數據库為dbname所有表结构及表數據（不加-d）
    mysqldump -uroot -pdbpasswd  dbname >db.sql;

    4、导出數據库為dbname某张表(test)结构及表數據（不加-d）
    mysqldump -uroot -pdbpasswd dbname test>db.sql;

导出
导出全库备份到本地的目录
mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --lock-all-tables --add-drop-database -A > db.all.sql

导出指定库到本地的目录(例如mysql库)
mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --databases mysql > db.sql

mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 
-c --skip-add-locks --databases mysql > db.sql

Exam:
mysqldump -uroot -p  -c --skip-add-locks nuc ec_indivuser  > /opt/data/bak/ec_indivuser_20070802.sql

导出库不带删除表语句

mysqldump -uroot -proot  -c --skip-add-locks --skip-add-drop-table dbs584 useractive_count_province --where=" time='2017-08-07'" > /opt/data/bak/20170806/807/useractive_count_province_mycat_to_mysql_20170807.sql

导出并压缩：
mysqldump -uprnp -pprnp -c --skip-add-locks  nuc_stat |gzip >/home/prnp/back/nuc_stat/nuc_stat_bak_2017-09-26.gz


导出某个库的表到本地的目录(例如mysql库的user表)
mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --tables mysql user> db.table.sql

导出指定库的表(仅数据)到本地的目录(例如mysql库的user表,带过滤条件)
mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-create-db --no-create-info --tables mysql user --where="host='localhost'"> db.table.sql

导出某个库的所有表结构
mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-data --databases mysql > db.nodata.sql

导出某个查询sql的数据为txt格式文件到本地的目录(各数据值之间用"制表符"分隔)
例如sql为'select user,host,password from mysql.user;'
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 --skip-column-names -B -e 'select user,host,password from mysql.user;' > mysql_user.txt

导出某个查询sql的数据为txt格式文件到MySQL服务器.
登录MySQL,将默认的制表符换成逗号.(适应csv格式文件).
指定的路径,mysql要有写的权限.最好用tmp目录,文件用完之后,再删除!
SELECT user,host,password FROM mysql.user INTO OUTFILE '/tmp/mysql_user.csv' FIELDS TERMINATED BY ',';
恢复全库数据到MySQL,因为包含mysql库的权限表,导入完成需要执行FLUSH PRIVILEGES;命令

导入
注：导入数据库前，执行
set foreign_key_checks=0;
关闭外键检测

第一种方法:
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 -f --default-character-set=utf8 < db.all.sql

-f:有错误继续导入

第二种方法:
登录MySQL,执行source命令,后面的文件名要用绝对路径.
......
mysql> source /tmp/db.all.sql;
恢复某个库的数据(mysql库的user表)
第一种方法:
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 mysql < db.table.sql

第二种方法:
登录MySQL,执行source命令,后面的文件名要用绝对路径.
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8
......
mysql> use mysql;
mysql> source /tmp/db.table.sql;
恢复MySQL服务器上面的txt格式文件(需要FILE权限,各数据值之间用"制表符"分隔)
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8
......
mysql> use mysql;
mysql> LOAD DATA INFILE '/tmp/mysql_user.txt' INTO TABLE user ;
恢复MySQL服务器上面的csv格式文件(需要FILE权限,各数据值之间用"逗号"分隔)
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8
......
mysql> use mysql;
mysql> LOAD DATA INFILE '/tmp/mysql_user.csv' INTO TABLE user FIELDS TERMINATED BY ',';
恢复本地的txt或csv文件到MySQL
mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8
......
mysql> use mysql;
# txt
mysql> LOAD DATA LOCAL INFILE '/tmp/mysql_user.csv' INTO TABLE user;
# csv
mysql> LOAD DATA LOCAL INFILE '/tmp/mysql_user.csv' INTO TABLE user FIELDS TERMINATED BY ',';
注意事项

关于MySQL连接
-u$USER 用户名
-p$PASSWD 密码
-h127.0.0.1 如果连接远程服务器,请用对应的主机名或者IP地址替换
-P3306 端口
--default-character-set=utf8 指定字符集
关于mysql参数
--skip-column-names 不显示数据列的名字
-B 以批处理的方式运行mysql程序.查询结果将显示为制表符间隔格式.
-e 执行命令后,退出
关于mysqldump参数
-A 全库备份
--routines 备份存储过程和函数
--default-character-set=utf8 设置字符集
--lock-all-tables 全局一致性锁
--add-drop-database 在每次执行建表语句之前,先执行DROP TABLE IF EXIST语句
--no-create-db 不输出CREATE DATABASE语句
--no-create-info 不输出CREATE TABLE语句
--databases 将后面的参数都解析为库名
--tables 第一个参数为库名 后续为表名
关于LOAD DATA语法
如果LOAD DATA语句不带LOCAL关键字,就在MySQL的服务器上直接读取文件,且要具有FILE权限.
如果带LOCAL关键字,就在客户端本地读取数据文件,通过网络传到MySQL.
LOAD DATA语句,同样被记录到binlog,不过是内部的机制.


#删除bin-log日志
mysql> purge {master|binary} logs to ‘log_name’;
mysql> purge {master|binary} logs before ‘date’;
#使用bin-log恢复数据
mysqlbinlog xxx-bin.000001|mysql -u root –p password dataname