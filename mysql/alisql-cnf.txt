[mysqld]
socket = /home/alisql/3306/tmp/mysql.sock
datadir = /home/alisql/3306/data
tmpdir = /home/alisql/3306/tmp
port = 3306
back_log = 3000
character_set_server = utf8
# 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。  
max_connect_errors = 100

# MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。 
max_connections = 4050

#针对某一个账号的所有客户端并行连接到MYSQL服务的最大并行连接数。简单说是指同一个账号能够同时连接到mysql服务的最大连接数。设置为0表示不限制。
max_user_connections = 4050

# 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变  
max_heap_table_size = 64M

# 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。  
# 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。  
max_allowed_packet = 1024M

#日志文件mysql-bin.000005，默认大约为1.1G
max_binlog_size = 500M

#每个线程的大小，来决定给每个线程分配多大的内存。用来存放每个线程的标识信息，如线程 id，线程运行时环境等，可以通过设置 
thread_stack = 256K

# 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时） 
interactive_timeout = 7200

# 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，  
# 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）  
# MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，  
# 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，  
# 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。  
# 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，  
# 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。
wait_timeout = 86400

# MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。  
# 如果不能，可以尝试增加sort_buffer_size变量的大小  
sort_buffer_size = 848KB

# MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。  
#如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能 
read_buffer_size = 848KB

# MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，  
# MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大  
read_rnd_buffer_size = 432KB

# 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享  
join_buffer_size = 432KB

#缓冲区大小，默认为16k，一般设置为8，16，32
net_buffer_length = 16K

# 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，  
# 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，  
# 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–>表示要调整的值)  
# 根据物理内存设置规则如下：  
# 1G  —> 8  
# 2G  —> 16  
# 3G  —> 32  
# 大于3G  —> 64
thread_cache_size = 100

# 分词词汇最小长度，默认4，也可以说Mysql最小索引长度
ft_min_word_len = 4

# MySQL支持4种事务隔离级别，他们分别是：  
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.  
# 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED  
transaction_isolation = READ-COMMITTED

#下面为2G,MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。  
# 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。  
# 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果 
tmp_table_size = 2097152

# MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64  
# 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；  
# 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上  
table_open_cache = 2000

#这个参数是禁止域名解析的（当然，也包括主机名）。参考<a href="https://jinjiajin.net/1301.html">https://jinjiajin.net/1301.html</a>
skip_name_resolve

#MySQL崩溃时生成coredump。参考http://wangyuanzju.blog.163.com/blog/static/1302920074127426137/
core-file

#说明是否数据目录所在的文件系统对文件名的大小写敏感。ON说明对文件名的大小写不敏感，OFF表示敏感。可以通过如下查看show variables like 'lower%';参考http://blog.csdn.net/jesseyoung/article/details/40617031
lower_case_table_names = 1

#参数缺省0，是不允许function的同步的，一般我们在配置repliaction的时候，都忘记关注这个参数，这样在master更新funtion后，slave就会报告错误，然后slave stoped。
#参考http://www.111cn.net/database/mysql/55519.htm
log_bin_trust_function_creators = 1

#参考http://www.ilanni.com/?p=7816
log-bin = /home/alisql/3306/mysql/mysql-bin.log
log-bin-index = /home/alisql/3306/mysql/master-log-bin.index
log-error = /home/alisql/3306/mysql/master-error.log
relay-log = /home/alisql/3306/mysql/slave-relay.log
relay-log-info-file = /home/alisql/3306/mysql/slave-relay-log.info
relay-log-index = /home/alisql/3306/mysql/slave-relay-log.index
master-info-file = /home/alisql/3306/mysql/master.info

#参数为主从同步设置的重要参数。参考http://blog.itpub.net/12679300/viewspace-1319263/
log-slave-updates = 1

# 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K  
binlog_cache_size = 2048KB

#默认为0，性能最好，支付服务推荐1，最安全为1参考http://www.cnblogs.com/Cherie/p/3309503.html
#参考http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/
sync_binlog = 1

#用来控制警告信息是否记录，默认值为1即启用，指定为0时表示禁用。如果指定该参数值大于1，则连接失败的消息也会写入错误日志。
log_warnings

# mysql 慢查询日志 参考<a href="https://jinjiajin.net/1300.html">https://jinjiajin.net/1300.html</a>
slow_query_log_file = /home/alisql/3306/mysql/slow_query.log

#值为ON的情况下（默认为OFF），当一条SQL语句执行的时间超过了 long_query_time 预设的时间（默认为10s，同时精确到微秒）时，默认（log_output值为FIFL时）就会把这种慢查询记录 到：slow_query_log_file值所指定的文件中。
#参考：http://www.cnblogs.com/dhb133/archive/2011/01/06/1927546.html
slow_query_log = 1

#参数是指定日志的存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'。log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。
log_output = TABLE

#慢查询时间 超过1秒则为慢查询  
long_query_time = 1

#mysql复制主要有三种方式：基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。
#参考http://www.111cn.net/database/mysql/71702.htm
binlog_format = ROW

server_id = 1844593058

#表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535
#参考<a href="https://jinjiajin.net/1311.html">https://jinjiajin.net/1311.html</a>
auto_increment_increment = 1

#指定起始值 范围 1-65535
auto_increment_offset = 1

#slave_net_timeout 的默认是 3600，也就是一小时。也就是说，在之前的情况下，Slave 要延误 1 小时后才会尝试重连。而在没有设置 master_heartbeat_period 时，将 slave_net_timeout 设得很短会造成 Master 没有数据更新时频繁重连。
#参考<a href="https://jinjiajin.net/1312.html">https://jinjiajin.net/1312.html</a>
slave_net_timeout = 60

#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，  
# 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，  
# 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，  
# 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低  
key_buffer_size = 16M

# 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。 
bulk_insert_buffer_size = 4M

# MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区  
myisam_sort_buffer_size = 262144

# 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出 
myisam_max_sort_file_size = 2048K

# 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)    
myisam_repair_threads = 1

#myisam自动修复表，默认为关闭(设置为""也表示关闭)，可以设置为OFF, DEFAULT, BACKUP, FORCE, 或 QUICK的组合，一般设置为BACKUP, FORCE
myisam_recover_options = FORCE

#如果没有指定innodb_data_home_dir，则默认为mysql数据目录
innodb_data_home_dir = /home/alisql/3306/mysql

#调整日志文件位于目录。在事务被提交并写入到表空间磁盘文件上之前，事务数据存储在InnoDB的redo日志文件里。这些日志位于innodb_log_group_home_dir变量定义的目录中，通常我们把这个目录设置与innodb_data_home_dir变量相同。为了获得最佳性能，建议分离innodb_data_home_dir和innodb_log_group_home_dir到单独的物理存储阵列上，这样可以保证IO资源不起冲突，利于服务器处理大量高并发连接。
innodb_log_group_home_dir = /home/alisql/3306/mysql

#这个参数用来设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小
#参考<a href="https://jinjiajin.net/1319.html">https://jinjiajin.net/1319.html</a>
innodb_additional_mem_pool_size = 2097152

# InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.  
# 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.  
# 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%  
# 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.  
# 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,  
# 所以不要设置的太高.  
innodb_buffer_pool_size = 13108M

#该变量设置innoDB数据文件的位置和大小。指定的文件必须大于10M，如果不受系统文件限制，可以设置大于4G。该变量是mysql服务器容量规划和性能扩展能力的核心要素。通常设置是创建一个数据目录内容的基线大小，在10M到128M之间，第二个文件设置为10M并自动扩展。如innodb_data_file_path = ibdata1:128M;ibdata2:10M:autoextend。
innodb_data_file_path = ibdata1:200M:autoextend

#参考http://www.ttlsa.com/mysql/increased_mysql_innodb_table_space/
innodb_file_per_table

#innodb_file_io_threads参数默认是4
#参考http://book.51cto.com/art/201402/429089.htm
innodb_file_io_threads = 4

# 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。  
# 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1  
# 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。  
# 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。  
# 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘  
# 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。  
# 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。  
# 总结  
# 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能  
innodb_flush_log_at_trx_commit = 1

# 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间  
innodb_log_buffer_size = 8M

# 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间  
innodb_log_file_size = 1500M

# 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3  
innodb_log_files_in_group = 2

# innodb主线程刷新缓存池中的数据，使脏数据比例小于90%  
innodb_max_dirty_pages_pct = 75

#这个参数控制着innodb数据文件及redo log的打开、刷写模式
#参考<a href="https://jinjiajin.net/1314.html">https://jinjiajin.net/1314.html</a>
innodb_flush_method = O_DIRECT

# InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒
innodb_lock_wait_timeout = 50

#1表示启动double write.具体参考<a href="https://jinjiajin.net/1317.html">https://jinjiajin.net/1317.html</a>
innodb_doublewrite = 1

#该变量默认值为OFF，如果事务因为加锁超时，会回滚上一条语句执行的操作。如果设置ON，则整个事务都会回滚。
#参考http://www.cnblogs.com/hustcat/archive/2012/11/18/2775487.html
innodb_rollback_on_timeout = OFF

#如果存在自增字段，MySQL会维护一个自增锁，和自增锁相关的一个参数为，可以设定3个值，0，1，2
#0：traditonal （每次都会产生表锁）
#1：consecutive （会产生一个轻量锁，simple insert会获得批量的锁，保证连续插入）
#2：interleaved （不会锁表，来一个处理一个，并发最高）
#可参考<a href="https://jinjiajin.net/1309.html">https://jinjiajin.net/1309.html</a>
innodb_autoinc_lock_mode = 1

# innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4  
# 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64  
innodb_read_io_threads = 4
innodb_write_io_threads = 4

#缓冲区刷新到磁盘时，刷新脏页数量；
#可参考http://www.cnblogs.com/cenalulu/p/3272606.html
innodb_io_capacity = 2000

# InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。  
# 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单  
# 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1  
innodb_purge_threads = 1

开启MTS功能后，务必将参数master_info_repostitory设置为TABLE，这样性能可以有50%~80%的提升。这是因为并行复制开启后对于元master.info这个文件的更新将会大幅提升，资源的竞争也会变大。在之前InnoSQL的版本中，添加了参数来控制刷新master.info这个文件的频率，甚至可以不刷新这个文件。因为刷新这个文件是没有必要的，即根据master-info.log这个文件恢复本身就是不可靠的。在MySQL 5.7中，Inside君推荐将master_info_repository设置为TABLE，来减小这部分的开销。
#参考https://www.kancloud.cn/thinkphp/mysql-parallel-applier/45911
master_info_repository = TABLE

#默认是FILE,即SQL线程执行的relaylog信息存储在参数relay_log_info_file指定的文件relay-log.info中,并且对这个文件每10000个事务更新一次[sync_relay_log_info的值]
#这样在relay_log_recovery=0的情况下，会出现slave和master数据不一致的情况。
#如果relay_log_info_repository=TABLE,则每完成一个事务就会更新mysql.slave_relay_log_info表。这样如果relay_log文件不损坏,就不会出现slave 和master数据不一致的情况。
#参考http://www.dbaqhs.com/archives/2048
relay_log_info_repository = TABLE


query_cache_type = 0
concurrent_insert = 1

#指定单个查询能够使用的缓冲区大小，默认1M  
query_cache_limit = 1048576


query_cache_min_res_unit = 1K
log-slow-admin-statements
innodb_stats_on_metadata = OFF
innodb_file_format = Barracuda
innodb_read_ahead = 0

# 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量  
innodb_thread_concurrency = 0

innodb_sync_spin_loops = 100
innodb_spin_wait_delay = 30
default_storage_engine = InnoDB
innodb_stats_sample_pages = 8

# MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，  
# 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。  
open_files_limit = 65535


gtid_mode = ON
loose_rds-anonymous-in-gtid-out-enable = 1
enforce-gtid-consistency = 1
loose_performance_schema = off
loose_binlog_order_commits = OFF
innodb_ft_max_token_size = 84
loose_tokudb_cache_size = 13108M
loose_opt_rds_enable_set_default_engine = OFF
log_bin_use_v1_row_events = 1
loose_innodb_rds_autoinc_persistent_interval = 1
delay_key_write = ON
key_cache_division_limit = 100
innodb_old_blocks_pct = 37
loose_rds_gtid_precommit = ON
loose_implicit_primary_key = 1
ft_query_expansion_limit = 20
loose_tokudb_checkpointing_period = 60
innodb_thread_sleep_delay = 10000
loose_innodb_log_compressed_pages = OFF
init_connect = ''
loose_rds_sql_select_filter = ''
innodb_print_all_deadlocks = OFF
delayed_insert_timeout = 300
loose_thread_pool_stall_limit = 30
loose_thread_pool_oversubscribe = 10
loose_max_statement_time = 0
loose_tokudb_commit_sync = ON
binlog_stmt_cache_size = 32768
net_retry_count = 10
binlog_checksum = CRC32
low_priority_updates = 0
loose_tokudb_support_xa = ON
autocommit = 1
loose_rds_set_connection_id_enabled = ON
key_cache_age_threshold = 300
innodb_concurrency_tickets = 5000
loose_innodb_rds_log_checksum_algorithm = INNODB
table_definition_cache = 512
loose_rds_check_core_file_enabled = ON
loose_tokudb_rpl_lookup_rows = OFF
innodb_use_native_aio = 0
net_write_timeout = 60
loose_rds_threads_running_high_watermark = 50000
slave_exec_mode = strict
query_alloc_block_size = 8192
loose_tokudb_fs_reserve_percent = 5
max_prepared_stmt_count = 16382
net_read_timeout = 30
loose_innodb_rds_min_concurrency_tickets = 50
loose_rds_ic_reduce_hint_enable = OFF
max_write_lock_count = 102400
innodb_old_blocks_time = 1000
innodb_stats_method = nulls_equal
max_length_for_sort_data = 1024
query_prealloc_size = 8192
innodb_large_prefix = OFF
delayed_insert_limit = 100
group_concat_max_len = 1024
innodb_disable_sort_file_cache = ON
loose_tokudb_buffer_pool_ratio = 0
loose_innodb_rds_autoinc_persistent = ON
innodb_ft_min_token_size = 3
loose_rds_enable_log_global_var_update = ON
loose_opt_rds_last_error_gtid = ON
loose_skip_symbolic_links = ON
loose_tokudb_rpl_unique_checks = OFF
key_cache_block_size = 1024
loose_tokudb_directio = OFF
slow_launch_time = 2
loose_tokudb_fsync_log_period = 0
loose_thread_handling = "one-thread-per-connection"
loose_rds_allow_unsafe_stmt_with_gtid = ON
innodb_online_alter_log_max_size = 134217728
innodb_open_files = 3000
eq_range_index_dive_limit = 10
loose_rds_reset_all_filter = 0
loose_innodb_adaptive_hash_index_parts = 8
div_precision_increment = 4
binlog_row_image = full
loose_tokudb_row_format = tokudb_zlib
innodb_strict_mode = OFF
delayed_queue_size = 1000
default_week_format = 0
loose_rds_expand_fast_index_creation = ON
log_queries_not_using_indexes = OFF
innodb_read_ahead_threshold = 56
loose_slave_parallel_workers = 8
connect_timeout = 10
default_time_zone = SYSTEM
loose_rds_slave_read_no_lock = ON
sql_mode = ''
innodb_table_locks = ON
query_cache_size = 3145728
innodb_adaptive_hash_index = ON
innodb_purge_batch_size = 300
loose_innodb_rds_adaptive_tickets_algo = ON
loose_rpl_semi_sync_slave_trace_level = 1
loose_rpl_semi_sync_master_timeout = 1000
loose_rpl_semi_sync_master_trace_level = 1
loose_rpl_semi_sync_slave_enabled = OFF
loose_rpl_semi_sync_master_enabled = OFF
loose_rpl_semi_sync_master_wait_no_slave = ON

[mysqldump]
quick
max_allowed_packet = 64M

[mysql]
no-auto-rehash
prompt = "\\u@\\h : \\d \\R:\\m:\\s> "

[myisamchk]
key_buffer = 512M
sort_buffer_size = 512M
read_buffer = 8M
write_buffer = 8M

[mysqlhotcopy]
interactive-timeout

[mysqld_safe]
user = mysql
basedir = /opt/alisql

[mysql_install_db]
basedir = /opt/alisql