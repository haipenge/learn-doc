Docker 常用资料
1.安装
ubuntu
http://docs.docker.com/installation/ubuntulinux/
sudo apt-get update
sudo apt-get install linux-image-generic-lts-trusty

apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

Open the /etc/apt/sources.list.d/docker.list file in your favorite editor.
On Ubuntu Trusty 14.04 (LTS)
add:
  deb https://apt.dockerproject.org/repo ubuntu-trusty main
  
Purge the old repo if it exists.
$ apt-get purge lxc-docker

升级Docker 
CentOS: yum -y update docker-io
Ubuntu: apt-get update lxc-docker

Verify that apt is pulling from the right repository.
$ apt-cache policy docker-engine

2.build docker image
mkdir my-image
cd my-image
vi Dockerfile
  example:
  FROM docker/whalesay:latest
  RUN apt-get -y update && apt-get install -y fortunes
  CMD /usr/games/fortune -a | cowsay
  
  
Build:
  docker build -t docker-whale .
  
  
1.运行docker
  service docker start
  docker run -t -i centos-env:1.0.1 /bin/bash
  
  -t - 分配一个（伪） tty (link is external)
  -i - 开发输入(so we can interact with it)
   ubuntu - 使用ubuntu基础镜像
   /bin/bash - 运行bash shell

  exam:
    docker run -v /home/core/share:/var/www:rw -p 80:80 -d nginx-example
	docker run - 启动容器
    -v /path/to/host/dir:/path/to/container/dir:rw - 指定一个目录共享到容器，并且指定权限为读写，也可以指定为只读
    -p 80:80 - 绑定端口.
    -d nginx-example 启动nginx-example的容器，由于在配置文件的CMD中已经指定启动了 nginx ，在容器启动时nginx即启动
	

exam: docker run -t -i -d -p 9080:80 -p 9022:22 centos-env:1.0.5 /bin/bash
	
2.停止运行docker
  docker stop <container_id>
  
3.查看镜像
  docker images
4.提交
  docker commit <container_id> centos-env:1.0.2

5.进入已启动的docker容器
  1).ssh,要求安装ssh,并做端口转发
  2).nsenter
    ubuntu 安装nsenter
    cd /tmp
    curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-cd util-linux-2.24./configure --without-ncursesmake nsentercp nsenter /usr/local/bin
	
	为了连接到容器，你还需要找到容器的第一个进程的PID。
	docker inspect --format "{{ .State.Pid }}" <container-id>
	通过这个PID，你就可以连接到这个容器：
	nsenter --target $PID --mount --uts --ipc --net --pid

  3).nsinit
  apt-get install git golang-go
  mkdir -p $HOME/go-dev/binmkdir -p $HOME/go-dev/src
  echo "export GOPATH=\$HOME/go-dev" >> ~/.profileecho "PATH=\$PATH:\$GOPATH/bin" >> ~/.profile
  source ~/.profile
  
  mkdir -p $GOPATH/src/github.com/dotcloudcd $GOPATH/src/github.com/dotcloud
  git clone https://github.com/dotcloud/docker.git
  cd $GOPATH/src/github.com/dotcloud/docker
  /usr/bin/go get -v github.com/dotcloud/docker/vendor/src/github.com/docker/libcontainer/nsinit

  nsinit读取的是位于/var/lib/docer/execdriver/native/<container-id>容器目录下的配置数据。
  要运行nsinit，你需要切换到容器目录下。由于/var/lib/docker目录对于root用户是只读权限，因此你还需要root权限。
  通过docker的ps命令，你可以确定容器ID。一旦你进入/var/lib/docker目录，你就可以连接容器了：
  
  nsinit exec /bin/bash

  docker exec -it <container_id> /bin/bash


6.备份、迁移、恢复
  备份：docker commit -p 30b8f18f20b4 container-backup
        1).# docker tag a25ddfec4d2a arunpyasi/container-backup:test
        2).# docker push arunpyasi/container-backup
  备份到本地：
        # docker save -o ~/container-backup.tar container-backup
  迁移:docker load -i ~/container-backup.tar

  恢复:docker run -d -p 80:80 container-backup



1.磁盘挂载
docker可以支持把一个宿主机上的目录挂载到镜像里。
docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash
通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。

2.数据卷
数据卷：“其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的”。感觉像是由一个容器定义的一个数据挂载信息。其他的容器启动可以直接挂载数据卷容器中定义的挂载信息。

看示例：
docker run -v /home/dock/Downloads:/usr/Downloads  --name dataVol ubuntu64 /bin/bash
创建一个普通的容器。用--name给他指定了一个名（不指定的话会生成一个随机的名子）。

再创建一个新的容器，来使用这个数据卷。
docker run -it --volumes-from dataVol ubuntu64 /bin/bash
--volumes-from用来指定要从哪个数据卷来挂载数据。

3.构建
docker build -t tage-name .


  
  